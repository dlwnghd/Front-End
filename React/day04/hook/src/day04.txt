--------------------------------------------- 복습

styled-components
- 리엑트 css 툴 중에 하나

삼항연산자?
- {조건식 ? true:false}

&&연산자?
- {조건식 && true}

=> 로딩페이지 띄울 때 백엔드 통신 중일 때 Loading =>> true --> 로딩페이지를 보여주고
false가 되었을 때 (백엔드와 통신이 성공했을 때) 그때 화면을 보여줘

=> 팝업창, 모달창 예 버튼클릭하면 어떤 값이 true가되고 false가 됨에 따라
컴포넌트를 띄우고 안뛰우고(보이게 안보이게)

비구조화할당 ****
props ****

---------------------------------------------

Hook
=> 옛날에 Class형을 사용했다

class 클래스명 extends Components {
...
};


function 함수명 () {

};

const 함수명 = () => {

};


생명 주기 (라이프 사이클)

페이지 처음 열렸을 때 ~ 페이지가 닫혔을 때 까지
이 사이에 일어나는 이벤트나 상태 값 변경등을 관리

Class형의 문제점:
Class는 다양한 기능을 사용할 수 있지만 기계와 사용자를 혼돈시킨다.
숙련된 React 개발자 조차도 Class의 완벽한 이해를 하는 것은 힘든 일

===> 함수형으로 리엑트를 만들어보자 해서 나온게 function형 리액트의 등장
===> class 형에서 관리하던 생명주기를 function에서 당연히 관리를 해주어야하는데 그를 위해서 등한게 바로

Hooks 함수(함수형에서만 사용 가능)

------------------------------------------------------------------------------------------

1. useState
- Hooks 의 상태 관리 함수
- 컴포넌트에서 바뀌는 값을 관리
- 값이 바뀐 것을 감지하여 랜더링

2. useRef
- js에서 getElementById, querySelector 같은 DOM SELECTOR 함수처럼
- React에서 DOM에 접근하게 되는 일이 생긴다면 접근하게 해주는 Hooks 함수

------------------------------------------------------------------------------------------

3. useMemo
- 연산된 값(결과)를 반환하여 재사용할 수 있게 해주는 Hooks 함수

4. useCallback
- 특정 함수를 새로 만들지 않고 재사용할 수 있게 해주는 Hooks 함수

(useMemo와 Callbcack을 사용해서 어떻게 최적화를 할 수 있느냐)

메모이제이션
- 만약 어떠한 연산이나 함수가 복잡해서 결과가 오래걸린다 (30초)
- 리엑트는 상태가 바뀌면 랜더링, 하지만 랜더링 될 때 값이 바뀌지 않는 부분이라면 한번 더
 실행해야할 필요가 있을까요?
- 값이 안바뀌는 연산이나 함수를 랜더링이 되더라도 재생성하지 않도록 값이나 함수를 재사용 즉,
랜더링 시 필요 없는 연산의 시간을 줄여주기 위해 사용

------------------------------------------------------------------------------------------

state의 값을 전역으로 처리하고 (하위 -> 하위 -> 하위 props 엄청 길어지겠죠?, 여러컴포넌트에서 사용되는
state의 값을 전역으로 사용하게 만들기 위해서 사용하는 것)

state 변경함수를 js 내 로직에서 실행하면 코드가 길어지고 더러워지죠?

따라서 reducer와 contextAPI를 활용하여 state값을 전역으로 활용하고 state 변경 로직을
외부 파일에서 실행할 수 있도록 할 겁니다. ==> redux ==> 토이프로젝트 

------------------------------------------------------------------------------------------

복습하셔야하거나 공부하셔야할게 있다면

1. state 값 변경에 따른 랜더링구조
2. 컴포넌트로 쪼개서 페이지 구성하는 법 [pages, components] -- 폴더 구조는 내가 짜는 것
3. 컴포넌트로 쪼갰을 때 다른 사람들이 내 코드를 읽기 쉽고 내가 해당 컴포넌트를 찾아가기 쉽게 짜는 것
4. 훅함수 (setse,ref...)
5. map, filter

------------------------------------------------------------------------------------------

useEffect
- 마운트 / 언마운트 시 특정 작업(함수나 이벤트)를 실행할 때 사용하는 Hook 함수
- 의존성 배열의 값이 바뀌었을 때도 함수나 이벤트를 실행

*마운트: 화면이 처음 랜더링 될 때
*언마운트: 화면이 사라질 때
