continue
    반복문 내에서 아래쪽의 부분을 건너뛰고 다음 반복으로
    넘어가게 하는 제어

    반복문{
        반복중인문장
        조건문{
            continue;
        }
        ...
    }

중첩 반복문
    반복문이 2개이상 겹쳐있는 문장
    반복문 안에 반복문

    for(let i=0;i<2;i++){
        for(let j=0;j<3;j++){

        }
    }

    i   j
    0   0 1 2
    1   0 1 2

    외부의 i for문은 수행해야 할 문장으로 j for문을 가지고 있다.
    따라서 j for문이 완벽하게 모두 마무리 되어야 i for문 입장에서는
    내부의 수행할 문장을 마친것이 되므로 i값이 하나 증가하며 다음
    반복으로 넘어가게 된다.

배열(Array)
    저장공간을 나열해놓은 형태의 자료구조
    하나의 이름과 방번호(인덱스)로 참조되는 정렬된 값의 집합

    배열 요소   : 배열을 구성하는 각각의 값
    인덱스      : 배열에서의 위치를 가리키는 숫자

배열의 선언
    let 배열명 = [값1,값2,...];
    let 배열명 = new Array(값1, 값2, ...)

자바스크립트 배열의 특징
    1. 배열 요소의 타입이 고정되어 있지 않다.
        let arr = ["김사과", 10, -1.124, true]
    
    2. 배열 요소의 인덱스가 연속적이지 않아도 된다.
        let arr = [];
        arr[0] = 10;
        arr[3] = 4;

Array객체의 메소드
    배열명.push()       : 배열에 요소를 추가
    배열명.pop()        : 배열의 마지막에 있는 값을 제거
    배열명.shift()      : 배열의 첫번째에 있는 값을 제거
    배열명.concat()     : 두개의 배열을 합친 배열 반환
    배열명.join()       : 배열 요소 사이에 원하는 문자를 삽입한 문자열 반환
    배열명.reverse()    : 배열을 역순으로 배치
    배열명.sort()       : 배열을 오름차순으로 정렬

빠른 for문
    for in 문(변수가 객체의 key값을 가져오며 반복)

        for(let 변수 in 객체){
            요소의 개수만큼 반복
        }

    for of 문(변수가 객체의 요소(값)를 가져오며 반복)

        for(let 변수 of 객체){
            요소의 개수만큼 반복
        }

함수(function)
    하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 영역을 의미한다.
    함수는 필요할 때마다 호출하여 해당 작업을 반복해서 수행하기 때문에 코드의
    재활용을 가능하게 해준다. 반복되는 코드, 행위, 기능들을 쉽게 관리하기
    위해서 선언하여 사용한다.

    f           (x)     =   2x+1
    함수이름    매개변수     리턴값

함수 선언
    function ①함수이름(②매개변수1, 매개변수2, ...){
        ③수행할 문장
        ④return 리턴값
    }

    ① 동사형으로 작성한다. ( eat("피자") eat("치킨") eat("떡볶이") )
    ② 생략 가능하다. 하지만 생략시에는 외부(사용하는 곳)에서 값을 전달받을 수 없고
    여러 값들을 전달받아야 할 때에는 , 로 구분하여 값의 개수만큼 선언해준다.
    사용시에는 선언된 매개변수의 개수만큼 맞춰서 값을 전달해준다.
    ③ 생략 가능하다.
    ④ 생략 가능하다.

함수 사용
    선언부에 선언된 매개변수의 개수만큼 값을 넘겨주면서 사용한다.

    함수명(값1, 값2, ...);  //매개변수가 있는 경우
    함수명();               //매개변수가 없는 경우

함수 사용 이유
    1. 반복되는 기능, 코드들을 쉽게 관리하기 위해서
            재사용의 목적(내부에서 특정성을 부여해서는 안된다.)
    2. 소스코드 간결화
            모듈화 -> 분업

함수 선언 순서
    두 정수의 덧셈 함수

    1. 함수명을 생각한다.
        function add(){

        }

    2. 매개변수를 생각한다.
        function add(num1, num2){
            
        }
    3. 내부에서 수행할 문장을 생각한다.
        function add(num1, num2){
            console.log("두 정수의 덧셈함수");
            let result = num1+num2;
        }
    4. 리턴값을 생각한다.
        function add(num1, num2){
            console.log("두 정수의 덧셈함수");
            let result = num1+num2;
            return result;
        }

리턴을 사용할 때
    사용하는 부분에 함수 내의 작업 결과를 알려주어야 할 때
    함수 내에서 모든 작업이 완료되지 않을 때
    사용하는 부분에서 할 작업이 더 남았을 때

리턴을 사용하지 않아도 될 때
    함수 내에서 모든 작업이 완료될 때

함수 표현식

    const 함수명 = function(매개변수1, 매개변수2, ..){
        수행할 문장
        return 리턴값
    }

    자바스크립트는 함수를 변수에 저장할 수 있다.
    자바스크립트는 script 태그를 만나면 자바스크립트를 읽고 선언된 함수를
    먼저 메모리에 저장한다.