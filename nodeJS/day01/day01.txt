
react와 reactProject에 관하여

nodeJS?

    ⭐NodeJs는 Chorme V8 JavaScript 엔진으로 빌드된 JavaScript 런타임(환경)
  
    노드를 통해 다양한 자바스크립트 애플리케이션을 실행할 수 있지만,
    노드는 서버를 실행하는데 유용한 도구들을 제공하여 서버로서 제일 많이 사용
    ex) express, nest, http, fs ...
    
    백엔드와 프론트엔드가 같은 언어를 사용하는게 장점
    Google V8 JavaScript 엔진을 사용하여 코드를 실행하고
    기본 모듈이 자바스크립트로 사용 서버(apache, iis, zeus, ...)와 WAS(tomcat...) 같은 서버 소프트웨어가 필요없이
    웹 서버 역할을 할 수 있는 내장 라이브러리가 존재
    
    npm 이라는 패키지 관리자(라이브러리를 다운받아 탑재시키는 역할)가 포함
    npm init => package.json 생성

    하지만 나중에 서버규모가 켜지면 외부 서버를 결국 연결해야함


서버외의 노드

    앵귤러, 리엑트, 뷰, 리엑트 네이티브
    
가장 많이 하는 오해

    nodeJS = 서버?

callback 지옥?
    
    java 스크립트는 비동기를 마주칠 수 밖에 없음
    
    ex) 
    myblog에서 게시글id와 댓글id를 백서버로 보내게 되면 백서버는 
    1. 게시글을 먼저 찾고 2. 찾은 게시글에서 댓글을 찾아야한다. 이 경우 게시글을 찾기 전에 댓글을 찾으려고 한다면 어떻게 될까?

    이러한 처리를 위하여 callback 함수를 사용하는데
    callback 함수가 중첩되어 함수의 길이가 깊어지고 가독성이 떨어지며 코드가 난잡해 보이는 현상

    해결 방안으로 기명함수 (함수를 변수화 시키는 것), promise, async/await 등이 있음   

async?
    promise의 then catch 반복으로 인한 코드가 길어지는 현상과 pending(대기) 상태가 지속되는 
    현상을 해결

promise?
    비동기를 접하게 되었을 때 악명 높은 콜백 지옥을 탈출했다는 점에서 높은 평가를 받고 있음
    대기, 이행, 실패의 상태가 존재하며 각 pending, resolve, reject라고 칭함


fs 모듈
    파일 처리와 관련된 모듈
    node.js에서 가장 기초적인 모듈

    readFile()      : 파일을 비동기적으로 읽음
    readFileSync()  : 파일을 동기적으로 읽음
    writeFile()     : 파일을 비동기적으로 씀
    writeFileSync() : 파일을 동기적으로 씀

예외처리
    try{
        예외가 발생할 수 있는 문장
    } catch(e){
        예외가 발생했을 경우 수행할 문장
    } finally{
        예외 발생 여부에 상관없이 수행할 문장
    }

http 모듈
    http 웹 서버를 생성하는 것과 관련된 모든 기능을 담당

    createServer()  : server객체를 생성
    writeHead()     : 응답 header를 구성
    end()           : 응답 body를 작성
    listen()        : 서버를 실행하고 클라이언트를 기다림

express 모듈
    http 모듈만 사용해서 웹 서버를 구성하면 직접 많은 기능을 따로 개발해야 하는 불편한 점이 있음
    간단한 코드로 웹 서버의 기능을 대부분 구현할 수 있는 express 모듈을 사용
    미들웨어와 라우터를 이용해서 편리하게 웹 서버를 구성

npm i express

nodemon 모듈
   서버 코드를 변경할 때마다 서버를 종료하고 다시 시작하지 않아도 
   알아서 서버를 재시작하도록 해주는 모듈
    ex) nodemon app.js

npm i nodemon